// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * Auth (NextAuth + Credentials)
 * ===========================
 */
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String       @unique
  password      String       // Credentials Provider용 해시 저장
  image         String?
  emailVerified DateTime?

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // App relations
  folders       Folder[]
  documents     Document[]

  // Onboarding / Profile (선택: 역참조)
  profile       UserProfile?
  experiences   Experience[]
  projects      Project[]
  certs         Certification[]
  languages     LanguageSkill[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ===========================
 * App Models
 * ===========================
 */
model Folder {
  id          String      @id @default(cuid())
  name        String
  type        FolderType
  parentId    String?
  parent      Folder?     @relation("FolderToChildren", fields: [parentId], references: [id])
  children    Folder[]    @relation("FolderToChildren")

  // 소유자
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  documents   Document[]

  // 인덱스/유니크 (동일 부모 내 동일 이름 방지)
  @@index([parentId])
  @@index([type, createdAt])
  @@index([createdById, parentId])
  @@unique([createdById, parentId, name])
}

enum FolderType {
  ROOT_COVERLETTER
  ROOT_RESUME
  ROOT_PORTFOLIO
  CUSTOM
}

model Document {
  id          String    @id @default(cuid())

  // 관계
  folderId    String
  folder      Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)

  // 소유자
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // 기본 필드 (UI에서 사용)
  title       String
  content     Json

  // 옵션 필드 (UI 테이블 컬럼)
  company     String?
  role        String?
  status      String?
  templateKey String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([folderId])
  @@index([updatedAt])
  @@index([createdById, updatedAt])
}

model Template {
  key        String   @id
  label      String
  category   TemplateCategory
  schema     Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([category, isActive])
}

enum TemplateCategory {
  COVERLETTER
  RESUME
  PORTFOLIO
}

/**
 * ===========================
 * Onboarding / Profile Models
 * ===========================
 * - MySQL: 원시 배열 불가 → Json 사용
 * - 경력/프로젝트 등은 User에 직접 종속(createdById)
 */
model UserProfile {
  id            String   @id @default(cuid())
  createdById   String   @unique
  createdBy     User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // 기본 인적사항
  name          String
  email         String
  phone         String?

  // 학력
  school        String?
  major         String?
  graduationY   Int?
  gpa           Float?
  gpaMax        Float?

  // 관심/스킬 (원시 배열 → Json)
  // 예: ["마케팅","데이터"], ["React","SQL"]
  interests     Json?
  skills        Json?

  // 경력 여부/요약
  isExperienced Boolean  @default(false)
  totalYears    Float?
  currentCompany String?
  currentRole    String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  company     String
  role        String
  startDate   DateTime
  endDate     DateTime?
  summary     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdById, startDate])
}

model Project {
  id          String    @id @default(cuid())
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  name        String
  role        String?
  startDate   DateTime?
  endDate     DateTime?
  problem     String?
  action      String?
  result      String?

  // 원시 배열 불가 → Json (예: ["React","MySQL"])
  techStack   Json?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([createdById, startDate])
}

model Certification {
  id          String   @id @default(cuid())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  name        String
  year        Int?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdById, year])
}

model LanguageSkill {
  id          String   @id @default(cuid())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  name        String    // TOEIC, OPIc ...
  level       String?   // 900, AL ...

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdById, name])
}

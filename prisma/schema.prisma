generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model certification {
  id          String   @id
  createdById String
  name        String
  year        Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        user     @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "Certification_createdById_fkey")

  @@index([createdById, year], map: "Certification_createdById_year_idx")
}

model document {
  id          String   @id
  folderId    String
  title       String
  content     Json
  templateKey String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  company     String?
  role        String?
  status      String?
  user        user     @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "Document_createdById_fkey")
  folder      folder   @relation(fields: [folderId], references: [id], onDelete: Cascade, map: "Document_folderId_fkey")

  @@index([createdById, updatedAt], map: "Document_createdById_updatedAt_idx")
  @@index([folderId], map: "Document_folderId_idx")
  @@index([updatedAt], map: "Document_updatedAt_idx")
}

model experience {
  id          String    @id
  createdById String
  company     String
  role        String
  startDate   DateTime
  endDate     DateTime?
  summary     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  user        user      @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "Experience_createdById_fkey")

  @@index([createdById, startDate], map: "Experience_createdById_startDate_idx")
}

model folder {
  id           String      @id
  name         String
  type         folder_type
  parentId     String?
  createdById  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  document     document[]
  user         user        @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "Folder_createdById_fkey")
  folder       folder?     @relation("folderTofolder", fields: [parentId], references: [id], map: "Folder_parentId_fkey")
  other_folder folder[]    @relation("folderTofolder")

  @@unique([createdById, parentId, name], map: "Folder_createdById_parentId_name_key")
  @@index([createdById, parentId], map: "Folder_createdById_parentId_idx")
  @@index([parentId], map: "Folder_parentId_idx")
  @@index([type, createdAt], map: "Folder_type_createdAt_idx")
}

model languageskill {
  id          String   @id
  createdById String
  name        String
  level       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        user     @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "LanguageSkill_createdById_fkey")

  @@index([createdById, name], map: "LanguageSkill_createdById_name_idx")
}

model project {
  id          String    @id
  createdById String
  name        String
  role        String?
  startDate   DateTime?
  endDate     DateTime?
  problem     String?
  action      String?
  result      String?
  techStack   Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  user        user      @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "Project_createdById_fkey")

  @@index([createdById, startDate], map: "Project_createdById_startDate_idx")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model template {
  key       String            @id
  label     String
  category  template_category
  schema    Json
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime

  @@index([category, isActive], map: "Template_category_isActive_idx")
}

model user {
  id            String          @id
  name          String?
  email         String          @unique(map: "User_email_key")
  password      String
  image         String?
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  account       account[]
  certification certification[]
  document      document[]
  experience    experience[]
  folder        folder[]
  languageskill languageskill[]
  project       project[]
  session       session[]
  userprofile   userprofile?
}

model userprofile {
  id             String   @id
  createdById    String   @unique(map: "UserProfile_createdById_key")
  name           String
  email          String
  phone          String?
  school         String?
  major          String?
  graduationY    Int?
  gpa            Float?
  gpaMax         Float?
  interests      Json?
  skills         Json?
  isExperienced  Boolean  @default(false)
  totalYears     Float?
  currentCompany String?
  currentRole    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  user           user     @relation(fields: [createdById], references: [id], onDelete: Cascade, map: "UserProfile_createdById_fkey")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum folder_type {
  ROOT_COVERLETTER
  ROOT_RESUME
  ROOT_PORTFOLIO
  CUSTOM
}

enum template_category {
  COVERLETTER
  RESUME
  PORTFOLIO
}

/// ================================
/// ✅ 회사 브리프 캐시 모델 (DB 캐시)
/// ================================
model CompanyBrief {
  id        String   @id @default(cuid())
  company   String
  role      String?   // null 허용 (포지션 없이도 저장)
  blurb     String
  bullets   Json      // string[] 저장용
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([company, role])
  @@index([updatedAt])
}
